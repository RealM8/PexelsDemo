package com.realmatesoft.pexelsdemo.backend

import com.realmatesoft.pexelsdemo.backend.data.Photo
import com.realmatesoft.pexelsdemo.backend.datasources.local.ILocalDbDao
import com.realmatesoft.pexelsdemo.backend.datasources.remote.IRemoteServerClient
import com.realmatesoft.pexelsdemo.backend.utils.ConnectionChecker
import io.reactivex.Single

class BackendRepositoryImpl(private var remoteServerClient: IRemoteServerClient, private var localDbDao: ILocalDbDao, private var connectionChecker : ConnectionChecker) : IBackendRepository {

    //For demo and simplicity purposes we do not handle HTTP errors, bundled into Single objects generated by Retrofit RxJava 2 adapter
    //But such need may arise in future

    override fun getPhotosFromPexels(): Single<List<Photo>> {
        return chooseSources(
            remoteServerClient.searchAndGetPictures("nature", 80)
                .doOnError { localDbDao.getAll() }
                .map{ savePhotosToLocalDB(it.photos) }
            , localDbDao.getAll()
        )
    }

    override fun getSpecificPhotoFromPexels(pictureId : Int, fromLocal : Boolean): Single<Photo> {
        if (fromLocal) {
            return localDbDao.getSpecificPhoto(pictureId)
        } else {
            return remoteServerClient.getSpecificPicture(pictureId)
                    .doOnSuccess { updateSpecificPhotoInLocalDB(it) }
                    .doOnError { localDbDao.getSpecificPhoto(pictureId) }
        }
    }

    private fun <T> chooseSources(fromNet: T, fromCache: T): T =
        when (connectionChecker.isNetworkAvailable()) {
            true -> fromNet
            false -> fromCache
        }

    private fun savePhotosToLocalDB(photos: List<Photo>) : List<Photo> {
        localDbDao.insertDownloadedPhotos(photos)
        return photos
    }

    private fun updateSpecificPhotoInLocalDB(photo : Photo) = localDbDao.updateDownloadedPhoto(photo)

}